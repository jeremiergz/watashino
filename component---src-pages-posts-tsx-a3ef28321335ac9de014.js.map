{"version":3,"sources":["webpack:///./src/components/List/Item/index.tsx","webpack:///./src/components/List/Label/index.tsx","webpack:///./src/components/List/index.tsx","webpack:///./src/utils/Date/index.ts","webpack:///./src/pages/posts.tsx"],"names":["Item","children","rest","FlexBox","alignItems","as","fontSize","fontWeight","justifyContent","paddingX","paddingY","textAlign","displayName","Label","Text","color","display","marginBottom","marginTop","marginX","List","Box","listStyle","margin","padding","months","0","1","2","3","4","5","6","7","8","9","10","11","Groups","styled","PostsPage","useStaticQuery","nodes","mdData","pageData","keywords","name","allPosts","reduce","acc","node","frontmatter","rawDate","date","slug","title","Date","year","getFullYear","post","push","allPostsKeys","Object","keys","useEffect","length","navigate","Routes","notFound","Layout","Content","path","posts","type","sort","a","b","localeCompare","map","key","getMonth","getDate","toString","padStart","getMonthAndDay","monthAndDay","marginRight","minWidth","Link","to"],"mappings":"uLAGMA,EAA4B,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,SAAaC,EAAW,4BAC3D,OACE,kBAACC,EAAA,EAAD,eACEC,WAAW,SACXC,GAAG,KACHC,SAAU,GACVC,WAAW,YACXC,eAAe,OACfC,SAAU,EACVC,SAAU,EACVC,UAAU,QACNT,GAEHD,IAKPD,EAAKY,YAAc,WAGJZ,Q,YCrBTa,EAA8B,SAAC,GAA0B,IAAxBZ,EAAwB,EAAxBA,SAAaC,EAAW,4BAC7D,OACE,kBAACY,EAAA,EAAD,eACET,GAAG,QACHU,MAAM,YACNC,QAAQ,QACRV,SAAU,GACVC,WAAW,YACXU,aAAc,EACdC,UAAW,EACXC,QAAS,GACLjB,GAEHD,IAKPY,EAAMD,YAAc,YAGLC,QCnBTO,EAAyE,SAAC,GAA0B,IAAxBnB,EAAwB,EAAxBA,SAAaC,EAAW,4BACxG,OACE,kBAACmB,EAAA,EAAD,eAAKhB,GAAG,KAAKiB,UAAU,OAAOC,OAAQ,EAAGC,QAAS,GAAOtB,GACtDD,IAKPmB,EAAKR,YAAc,OACnBQ,EAAKpB,KAAOA,EACZoB,EAAKP,MAAQA,EAGEO,Q,wBClBTK,EAAS,CACbC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,GAAI,MACJC,GAAI,O,gBCFAC,EAASC,YAAOlB,KAAV,oEAAGkB,CAAH,0CAMNC,EAAsB,WAAM,MAI5BC,yBAAe,cAFPC,EAFoB,EAE9BC,OAAUD,MAFoB,IAG9BE,SAAYC,EAHkB,EAGlBA,SAAUC,EAHQ,EAGRA,KAkBlBC,EAA0CL,EAAMM,QAAO,SAACC,EAAKC,GAAS,MAGtEA,EADFC,YAAqBC,EAFmD,EAEzDC,KAAeC,EAF0C,EAE1CA,KAAMC,EAFoC,EAEpCA,MAEhCF,EAAO,IAAIG,KAAKJ,GAChBK,EAAOJ,EAAKK,cAEZC,EAAO,CAAEN,OAAMC,OAAMC,SAM3B,OAPkBN,EAAIQ,GAGpBR,EAAIQ,GAAMG,KAAKD,GAEfV,EAAIQ,GAAQ,CAACE,GAERV,IACN,IACGY,EAAeC,OAAOC,KAAKhB,GAIjC,OAHAiB,qBAAU,WACoB,IAAxBH,EAAaI,QAAcC,mBAASC,IAAOC,YAC9C,CAACP,IAEF,kBAACQ,EAAA,EAAD,KACGR,EAAaI,OAAS,GACrB,kBAACI,EAAA,EAAOC,QAAR,CAAgBzB,SAAUA,EAAU0B,KAAMJ,IAAOK,MAAOjB,MAAOT,EAAM2B,KAAK,WACxE,kBAACnC,EAAD,KACGuB,EACEa,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,cAAcF,MAC/BG,KAAI,SAAArB,GAAI,OACP,kBAAC,EAAD,CAAMsB,IAAKtB,GACT,kBAAC,EAAK5C,MAAN,KAAa4C,GACZV,EAASU,GAAMqB,KAAI,YAA2B,IAAxBzB,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAY,ED9CjE,SAAwBF,GAGtB,MAAO,CAFO5B,EAAO4B,EAAK2B,YACd3B,EAAK4B,UAAUC,WAAWC,SAAS,EAAG,MC6CXC,CAAe/B,GAC9BgC,EAFuC,KAE5B,IAF4B,KAG7C,OACE,kBAAC,EAAKrF,KAAN,CAAW+E,IAAKzB,GACd,kBAACjC,EAAA,EAAD,CACEhB,GAAG,OACHU,MAAM,UACNT,SAAU,GACVC,WAAW,OACX+E,YAAa,EACbpE,UAAU,MACVqE,SAAU,IAETF,GAEH,kBAACG,EAAA,EAAD,CAAMC,GAAInC,GAAOC,eAazCf,EAAU5B,YAAc,YAET4B","file":"component---src-pages-posts-tsx-a3ef28321335ac9de014.js","sourcesContent":["import FlexBox, { FlexBoxProps } from 'components/primitives/FlexBox';\nimport React from 'react';\n\nconst Item: React.FC<ItemProps> = ({ children, ...rest }) => {\n  return (\n    <FlexBox\n      alignItems=\"center\"\n      as=\"li\"\n      fontSize={24}\n      fontWeight=\"semi-bold\"\n      justifyContent=\"left\"\n      paddingX={0}\n      paddingY={2}\n      textAlign=\"left\"\n      {...rest}\n    >\n      {children}\n    </FlexBox>\n  );\n};\n\nItem.displayName = 'ListItem';\n\nexport type ItemProps = FlexBoxProps;\nexport default Item;\n","import Text, { TextProps } from 'components/primitives/Text';\nimport React from 'react';\n\nconst Label: React.FC<LabelProps> = ({ children, ...rest }) => {\n  return (\n    <Text\n      as=\"label\"\n      color=\"secondary\"\n      display=\"block\"\n      fontSize={32}\n      fontWeight=\"semi-bold\"\n      marginBottom={4}\n      marginTop={5}\n      marginX={0}\n      {...rest}\n    >\n      {children}\n    </Text>\n  );\n};\n\nLabel.displayName = 'ListLabel';\n\nexport type LabelProps = TextProps;\nexport default Label;\n","import Box, { BoxProps } from 'components/primitives/Box';\nimport React from 'react';\nimport Item from './Item';\nimport Label from './Label';\n\nconst List: React.FC<ListProps> & { Item: typeof Item; Label: typeof Label } = ({ children, ...rest }) => {\n  return (\n    <Box as=\"ul\" listStyle=\"none\" margin={0} padding={0} {...rest}>\n      {children}\n    </Box>\n  );\n};\n\nList.displayName = 'List';\nList.Item = Item;\nList.Label = Label;\n\nexport type ListProps = BoxProps;\nexport default List;\n","const months = {\n  0: 'JAN',\n  1: 'FEB',\n  2: 'MAR',\n  3: 'APR',\n  4: 'MAY',\n  5: 'JUN',\n  6: 'JUL',\n  7: 'AUG',\n  8: 'SEP',\n  9: 'OCT',\n  10: 'NOV',\n  11: 'DEC',\n};\n\n/**\n * Returns a 3-letter formatted month & a 0-padded day from given date.\n *\n * @param date the date to extract data from\n */\nfunction getMonthAndDay(date: Date) {\n  const month = months[date.getMonth()];\n  const day = date.getDate().toString().padStart(2, '0');\n  return [month, day];\n}\n\nexport { getMonthAndDay };\n","import Layout from 'components/Layout';\nimport Link from 'components/Link';\nimport List from 'components/List';\nimport Box from 'components/primitives/Box';\nimport { graphql, navigate, useStaticQuery } from 'gatsby';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getMonthAndDay } from 'utils/Date';\nimport { Routes } from 'utils/Routes';\n\nconst Groups = styled(Box)`\n  > :first-child > label {\n    margin-top: 0;\n  }\n`;\n\nconst PostsPage: React.FC = () => {\n  const {\n    mdData: { nodes },\n    pageData: { keywords, name },\n  } = useStaticQuery(graphql`\n    query PostsPage {\n      mdData: allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n        nodes {\n          frontmatter {\n            date\n            slug\n            title\n          }\n        }\n      }\n      pageData: navigationJson(page: { eq: \"PostsPage\" }) {\n        keywords\n        name\n      }\n    }\n  `);\n  const allPosts: Record<string, Models.Post[]> = nodes.reduce((acc, node) => {\n    const {\n      frontmatter: { date: rawDate, slug, title },\n    } = node;\n    const date = new Date(rawDate);\n    const year = date.getFullYear();\n    const yearGroup = acc[year];\n    const post = { date, slug, title };\n    if (yearGroup) {\n      acc[year].push(post);\n    } else {\n      acc[year] = [post];\n    }\n    return acc;\n  }, {});\n  const allPostsKeys = Object.keys(allPosts);\n  useEffect(() => {\n    if (allPostsKeys.length === 0) navigate(Routes.notFound);\n  }, [allPostsKeys]);\n  return (\n    <Layout>\n      {allPostsKeys.length > 0 && (\n        <Layout.Content keywords={keywords} path={Routes.posts} title={name} type=\"section\">\n          <Groups>\n            {allPostsKeys\n              .sort((a, b) => b.localeCompare(a))\n              .map(year => (\n                <List key={year}>\n                  <List.Label>{year}</List.Label>\n                  {allPosts[year].map(({ date, slug, title }) => {\n                    const [month, day] = getMonthAndDay(date);\n                    const monthAndDay = `${month}-${day}`;\n                    return (\n                      <List.Item key={slug}>\n                        <Box\n                          as=\"span\"\n                          color=\"primary\"\n                          fontSize={16}\n                          fontWeight=\"bold\"\n                          marginRight={4}\n                          marginTop=\"2px\"\n                          minWidth={64}\n                        >\n                          {monthAndDay}\n                        </Box>\n                        <Link to={slug}>{title}</Link>\n                      </List.Item>\n                    );\n                  })}\n                </List>\n              ))}\n          </Groups>\n        </Layout.Content>\n      )}\n    </Layout>\n  );\n};\n\nPostsPage.displayName = 'PostsPage';\n\nexport default PostsPage;\n"],"sourceRoot":""}