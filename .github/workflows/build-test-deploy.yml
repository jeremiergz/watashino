name: Build & Test & Deploy
on: [push]

jobs:
  build-npm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install Dependencies
        run: npm ci
      - name: Build
        run: npm run build
        env:
          GOOGLE_MAPS_STATIC_API_KEY: ${{ secrets.GOOGLE_MAPS_STATIC_API_KEY }}
      - name: Upload dist files
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: public
          path: public/

  quality-lint:
    runs-on: ubuntu-latest
    needs: build-npm
    steps:
      - uses: actions/checkout@v2
      - name: Use cached node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Run linter
        run: npm run lint

  quality-test:
    runs-on: ubuntu-latest
    needs: build-npm
    steps:
      - uses: actions/checkout@v2
      - name: Use cached node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Run tests
        run: npm test

  deploy-ghcr:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build-npm, quality-test]
    steps:
      - uses: actions/checkout@v2
      - name: Download dist files
        uses: actions/download-artifact@v2
        with:
          name: public
          path: public/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: |
            GIT_COMMIT="${{ github.sha }}"
            VERSION="${{ github.ref_name }}"
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  deploy-pages:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build-npm, quality-test]
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Use cached node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Download dist files
        uses: actions/download-artifact@v2
        with:
          name: public
          path: public/
      - name: Configure Git
        run: |
          git config user.name "${{ secrets.GIT_USER }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
        env:
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_USER: ${{ secrets.GIT_USER }}
      - name: Deploy to Github Pages
        run: npm run deploy
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
